$Author: Mihai Åžucan $
$URL: http://code.google.com/p/paintweb $
$Date: 2009-07-30 14:35:21 +0300 $

Until the end of GSOC:

- Integrate into TinyMCE and Moodle.
- Color theme for the OLPC XO.

As quick as possible, after GSOC 2009:

- report browser bugs:
  - when strokeText() is used shadows do not render (Webkit, needs recheck).
  - elem.hasAttribute('data-whatever') fails to return true when it should do 
  so. The problem affects Webkit.
  - outlines are drawn irrespective of z-index in Opera 9.6 and Opera 10.
  - serious redraw issues with the color mixer when the colormixer_selector tab 
  panel has some width set. The problem affects Opera 9.6 and Opera 10.
  - globalCompositeOperation + gradients renders mildly different in Google 
  Chrome 2 on Windows, compared to the other browsers. To see this, test the RGB 
  color space visualisation in the color mixer. I cannot reproduce the issue 
  with Google Chrome 3 on Linux.
  - images cannot be selected in editable content, on Webkit - in some special 
  cases.
  - images with data URL are considered external, and thus when drawn on Canvas 
  they cause security violations, in Webkit and Gecko 1.9.0 (fixed in 1.9.1).

- implement the GUI improvements suggested by Olli Savolainen.
- new tools: bucket, pencil v2 (avec pression).
- toolRegister creates instances of tool objects automatically.
  - cleanup interface script from having hard-coded stuff related to tools.
- investigate the use of an iframe to hold the whole PaintWeb interface because 
I can have style sandboxing and other advantages.
- allow integration by specifying a form input to replace.
- provide API to load language strings on demand.
- provide API to load configurations on demand.
- viewport resize handle.
- double-click on the tab bar to hide its content and only show a minimal list 
of tabs.
- allow canvas resize on the right and at the bottom - not just the south-east 
resize handle.
- allow single click on the image size, in the status bar to bring-up a panel 
which shows the image dimensions, where the user can crop and resize the image.
- implement a GUI option to allow live changing of background color.
- flip and rotate image.
- some issues when middle/right clicking instead of simple left click on the 
canvas, with some drawing tools.
- maybe selection rotate.
- maybe use .scale() and .translate() for selection manipulation.
- more per-tool settings. For example, do not share the lineWidth option between 
tools.
- css 3 animations for the GUI.
- make the color mixer resizable.
- attempt color mixer code organization / code quality improvements.
- look into performance improvement specific to the color mixer.
- allow mousewheel scrolling on the color mixer slider.
- allow the user to focus the color mixer slider, to press up/down keys.
- allow the user to press Enter in the color mixer in an input to simply accept 
the current color.
- (maybe) allow the user to press Escape in an input from the color mixer to 
close/cancel the color change.
- retest overall performance and see if more things can be improved. More 
importantly, try initialization performance improvements.
- allow mousewheel scroll to increase/decrease the numeric value in an input of 
type=number.
- allow permanent color save in the color mixer.
- add a checkbox into the color mixer which allows the user to enable realtime 
color changes, such that, without clicking accept, the user can test the new 
color using some drawing tool.
- tab reordering and grouping.

Each and every item is doable pretty "easy", but it takes a lot of time to do 
all of the above. Some of the items might get dropped. On request, I can 
prioritize any item from the list during GSOC.

Further down the road:

* allow editing of multiple images in a single paintweb instance;
* hybrid undo system, not like now (storing ImageDatas);
* hybrid drawing: vectorial + bitmap drawing;
* layers;
* non-destructive filters;
* color gradients and fill patterns;
* macros: look into the possibility of implementing a scripting API compatible 
  with that of Photoshop. Photoshop can run JavaScript. PaintWeb can run 
  JavaScript: just provide the same API. Obviously, PaintWeb could implement 
  only a subset, but it would be very good if this kind of work would be 
  successful.

That should be all for now. Huh, lots of work to do.

Volunteers are needed! Please contact me if you want to help. Thank you! ;)

--
vim:set spell spl=en fenc=utf-8 ff=unix: 

