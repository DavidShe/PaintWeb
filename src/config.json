{
  // $Date: 2009-05-08 14:44:01 +0300 $
  // TODO: try jsdoc-toolkit on this json (!)

  /**
   * Language file.
   *
   * @type String
   * @default "lang/en.json"
   */
  "langFile": "lang/en.json",

  /**
   * The Canvas element ID used in the markup document for the image layer.
   *
   * @type String
   * @default "imageLayer"
   */
  "layerCanvasID": "imageLayer",

  /**
   * The Canvas element ID used in the markup document for the image buffer.
   *
   * @type String
   * @default "imageBuffer"
   */
  "bufferCanvasID": "imageBuffer",

  /**
   * Shape drawing "type": filled, only stroke, or both. Possible values: 
   * "filled", "stroke" or "both".
   *
   * @type String
   * @default "both"
   */
  "shapeType": "both",

  /**
   * Number of available history steps.
   *
   * @type Number
   * @default 10
   */
  "historyLimit": 10,

  /**
   * Zoom factor when the user increases/decreases the zoom level.
   *
   * @type Number
   * @default 0.05
   */
  // 0.05 means 5% zoom.
  "zoomStep": 0.05,

  /**
   * The maximum allowed zoom level.
   *
   * @type Number
   * @default 4
   */
  // 4 means 400% zoom.
  "zoomMax": 4,

  /**
   * The minimum allowed zoom level.
   *
   * @type Number
   * @default 0.2
   */
  // 0.2 means 20% zoom.
  "zoomMin": 0.2,

  /**
   * Holds the list of drawing tools you want to load.
   * @type Array
   */
  "tools": ["cpicker", "curve", "drag", "ellipse", "eraser", "insertimg", "line", "pencil", "poly", "rect", "select", "text"],

  /**
   * Tools folder.
   * @type String
   * @default "tools"
   */
  "toolsFolder": "tools",

  /**
   * The default tool ID.
   *
   * @type String
   * @default "line"
   * @see this.tools The array holding the list of drawing tools you want 
   * loaded.
   */
  "toolDefault": "line",

  /**
   * Holds the list of extensions you want to load.
   * @type Array
   */
  "extensions": ["mousekeys"],

  /**
   * Extensions folder.
   * @type String
   * @default "extensions"
   */
  "extensionsFolder": "extensions",

  /**
   * @namespace Holds the MouseKeys extension options.
   */
  // TODO: actually implement support into MouseKeys for all this.
  "mousekeys": {
    /**
     * The mouse keys movement acceleration.
     *
     * @type Number
     * @default 0.1
     * @see PaintMouseKeys The MouseKeys extension.
     */
    "accel": 0.1,

    /**
     * Holds the list of actions, associated to keyboard shortcuts.
     *
     * @type Object
     */
    // We make sure the number keys on the NumPad also work when the Shift key 
    // is down.
    "actions": {
      "ButtonToggle": [0, "Shift Insert"],
      "SouthWest":    [1, "Shift End"],
      "South":        [2, "Shift Down"],
      "SouthEast":    [3, "Shift PageDown"],
      "West":         [4, "Shift Left"],
      "ButtonClick":  [5, "Shift Clear"],
      "East":         [6, "Shift Right"],
      "NorthWest":    [7, "Shift Home"],
      "North":        [8, "Shift Up"],
      "NorthEast":    [9, "Shift PageUp"]
    }
  },

  /**
   * Keyboard shortcuts associated to drawing tools and other actions.
   *
   * @type Object
   * @see PaintTools The object holding all the drawing tools.
   */
  // TODO: several keyboard shortcuts are still missing. See below.
  "keys": {
    "E": { "tool": "ellipse" },
    "G": { "tool": "poly" },
    "H": { "tool": "drag" },
    "I": { "tool": "insertimg" },
    "L": { "tool": "line" },
    "O": { "tool": "eraser" },
    "P": { "tool": "pencil" },
    "R": { "tool": "rect" },
    "S": { "tool": "select" },
    "T": { "tool": "text" },
    "V": { "tool": "curve" }
  }

  /***** FIXME old keyboard shortcuts from PaintWeb 0.5. Will be updated soon.
  // Global keyboard shortcuts. These can access functions and/or tools.
  // For each keyboard shortcut an element can be associated. During initialization the script will add the keyboard shortcut to the title of each element.
  _me.kshortcuts = {
    'ctrl-z' : {
      'func' : _me.btn_undo,
      'elem' : 'btn_undo'
    },
    'ctrl-y' : {
      'func' : _me.btn_redo,
      'elem' : 'btn_redo'
    },
    'ctrl-x' : {
      'func' : _me.btn_cut,
      'elem' : 'btn_cut'
    },
    'shift-delete' : { 'func' : _me.btn_cut },
    'ctrl-c' : {
      'func' : _me.btn_copy,
      'elem' : 'btn_copy'
    },
    'ctrl-v' : {
      'func' : _me.btn_paste,
      'elem' : 'btn_paste'
    },
    'ctrl-n' : {
      'func' : _me.btn_clear,
      'elem' : 'btn_clear'
    },
    'ctrl-shift-n' : { 'func' : _me.btn_clear },
    'ctrl-s' : {
      'func' : _me.btn_save,
      'elem' : 'btn_save'
    },

    '?' : {
      'func' : _me.btn_help,
      'elem' : 'btn_help'
    },
    'shift-?' : { 'func' : _me.btn_help },

    '+' : { 'func' : _me.key_zoom },
    '-' : { 'func' : _me.key_zoom },
    '*' : { 'func' : _me.key_zoom },
    'shift-+' : { 'func' : _me.key_zoom },
    'shift--' : { 'func' : _me.key_zoom },
    'shift-*' : { 'func' : _me.key_zoom },

    'c' : { 'tool' : 'cpicker' },
    'e' : { 'tool' : 'ellipse' },
    'g' : { 'tool' : 'poly' },
    'h' : { 'tool' : 'drag' },
    'i' : { 'tool' : 'insertimg' },
    'l' : { 'tool' : 'line' },
    'o' : { 'tool' : 'eraser' },
    'p' : { 'tool' : 'pencil' },
    'r' : { 'tool' : 'rect' },
    't' : { 'tool' : 'text' },
    's' : { 'tool' : 'select' },
    'v' : { 'tool' : 'curve' },
    'x' : { 'func' : _me.coloreditor.swap_fill_stroke }
  }; */

  // vim:set spell spl=en fo=wan1croql tw=80 ts=2 sw=2 sts=2 sta et ai cin fenc=utf-8 ff=unix ft=javascript:
}
